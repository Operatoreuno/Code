// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const checkUserEmailExists = `-- name: CheckUserEmailExists :one
SELECT COUNT(*) FROM users WHERE email = $1
`

func (q *Queries) CheckUserEmailExists(ctx context.Context, email string) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkUserEmailExists, email)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, password, name, surname, stripe_customer_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, email, password, name, surname, phone, role, image_profile, stripe_customer_id, is_active, last_login, created_at
`

func (q *Queries) CreateUser(ctx context.Context, email string, password string, name string, surname string, stripeCustomerID sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		email,
		password,
		name,
		surname,
		stripeCustomerID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Name,
		&i.Surname,
		&i.Phone,
		&i.Role,
		&i.ImageProfile,
		&i.StripeCustomerID,
		&i.IsActive,
		&i.LastLogin,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password, name, surname, phone, role, image_profile, stripe_customer_id, is_active, last_login, created_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Name,
		&i.Surname,
		&i.Phone,
		&i.Role,
		&i.ImageProfile,
		&i.StripeCustomerID,
		&i.IsActive,
		&i.LastLogin,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, password, name, surname, phone, role, image_profile, stripe_customer_id, is_active, last_login, created_at FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Name,
		&i.Surname,
		&i.Phone,
		&i.Role,
		&i.ImageProfile,
		&i.StripeCustomerID,
		&i.IsActive,
		&i.LastLogin,
		&i.CreatedAt,
	)
	return i, err
}
